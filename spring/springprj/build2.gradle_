//queryDSL을 위한 dependency를 받기 위해서 buildscript를 적어준다 */
buildscript {
   dependencies {
      classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10")
   }
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
}

apply plugin: "com.ewerk.gradle.plugins.querydsl" 

group = 'com.codingbox'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	implementation 'com.querydsl:querydsl-jpa'
	implementation 'com.querydsl:querydsl-apt'	
	
}

tasks.named('test') {
	useJUnitPlatform()
}

//querydsl 추가 
def querydslDir = 'src/main/generated' 
//def querydslDir = "$buildDir/generated/querydsl" 
querydsl { 
	library = "com.querydsl:querydsl-apt:4.1.4" 
	jpa = true 
	querydslSourcesDir = querydslDir 
} 

sourceSets { 
	main { 
		java { 
			srcDirs = ['src/main/java', querydslDir] 
		} 
	} 
} 



compileQuerydsl{ 
	options.annotationProcessorPath = configurations.querydsl 
}
 
configurations {
	querydsl.extendsFrom compileClasspath 
} 












